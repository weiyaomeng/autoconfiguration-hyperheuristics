package examples.cf;

/*
 * This class implements a simplified choice function hyper-heuristics for the purpose of the NATCOR2024 @UoN
 * The hyper-heuristic operates on heuristics of type MUTATION, LOCAL_SEARCH, RUIN_RECREATE and uses a simple 'All Moves' acceptance criteria.
 * For each of these heuristics, parameters IOM and DOS are applied.
 * 
 * The simplified version of the modified choice function is:
 * F_t(h_j) = phi_t * f1(h_j) + (1-phi) * f3(h_j)
 * @param F_t: the schore of the heuristic h_j at iteration t.
 * @param f1: a function to score the h_j based on improvement and time taken from its previous application.
 * @param f3: a function to score the h_j based on the time since h_j was last chosen
 * @param phi: if the candidate solution quality was improved, phi = 0.99; else, phi is updated as phi_t = max(0.01, phi_{t-1}-0.01)
 * 
 * f1(h_j) = I(h_j) / T(h_j)
 * @param I: the change in solution quality as a result of applying h_j
 * @param T: the time taken in seconds to apply the h_j the last time it was applied
 * 
 * f3(h_j) = the time in seconds since the h_j was last chosen
 * 
 * @author Weiyao Meng
 * @date 2024.03.26
 */


public class HeuristicData {

	private long timeLastApplied;
	
	private long previousApplicationDuration;
	
	private double f_delta;
	
	public HeuristicData(long currentTime) {
		
		this.timeLastApplied = currentTime;
		this.f_delta = -Double.MAX_VALUE;
		this.previousApplicationDuration = 0;
	}

	public long getTimeLastApplied() {
		return timeLastApplied;
	}

	public void setTimeLastApplied(long timeLastApplied) {
		this.timeLastApplied = timeLastApplied;
	}

	public double getF_delta() {
		return f_delta;
	}

	public void setF_delta(double f_delta) {
		this.f_delta = f_delta;
	}

	public long getPreviousApplicationDuration() {
		return previousApplicationDuration;
	}

	public void setPreviousApplicationDuration(long previousApplicationDuration) {
		this.previousApplicationDuration = previousApplicationDuration;
	}
}
