package irace;

import AbstractClasses.HyperHeuristic;
import AbstractClasses.ProblemDomain;
import travelingSalesmanProblem.TSP;

/**
 * --------Weiyao 0315--------
 * multiple LLHs, same DoS and IoM parameters
 * correspond to test1.jar
 * ---------------------------
 * This class shows how to run a selected hyper-heuristic on a selected problem domain.
 * It shows the minimum that must be done to test a hyper heuristic on a problem domain, and it is 
 * intended to be read before the ExampleRun2 class, which provides an example of a more complex set-up
 */
public class ExampleRun1_v3 {

	public static void main(String[] args) {

		
		int insid; double depthOfSearch, intensityOfMutation;
		long time;
		
		// Ensure that command-line arguments are provided
        if (args.length != 4) {
            System.out.println("Usage: java -cp .:<version>.jar irace.ExampleRun1 parameters <termination> <insid> <depth> <intensity>");
            System.exit(1);
        }
        
     // Parse command line arguments
        for (int j = 0; j < args.length; j++) {
            switch (args[j]) {
                case "-p":
                	insid = Integer.parseInt(args[++j]);
                    break;
                case "-d":
                	depthOfSearch = Double.parseDouble(args[++j]);
                    break;
                case "-i":
                	intensityOfMutation = Double.parseDouble(args[++j]);
                    break;
                case "-t":
                	time = Long.parseLong(args[++j]);
                default:
                    System.out.println("Unknown option: " + args[j]);
                    System.exit(1);
            }
        }
        
        // Parsing arguments
//        try {
//        	time = Long.parseLong(args[0]);
//            insid = Integer.parseInt(args[1]);
//            depthOfSearch = Double.parseDouble(args[2]);
//            intensityOfMutation = Double.parseDouble(args[3]);
//        } catch (NumberFormatException e) {
//            System.out.println("Invalid arguments.");
//            return;
//        }

		//create a ProblemDomain object with a seed for the random number generator
		//ProblemDomain problem = new SAT(1234);
		ProblemDomain problem = new TSP(1234);

		//creates an ExampleHyperHeuristic object with a seed for the random number generator
//		HyperHeuristic hyper_heuristic_object = new ExampleHyperHeuristic1(5678);
//		HyperHeuristic hyper_heuristic_object = new ExampleHyperHeuristic1_modify(5678, 0.2, 0.2);
		HyperHeuristic hyper_heuristic_object = new ExampleHyperHeuristic1_v1(5678, depthOfSearch, intensityOfMutation);

		//we must load an instance within the problem domain, in this case we choose instance 2
		problem.loadInstance(insid);
//		problem.loadInstance(0);

		//we must set the time limit for the hyper-heuristic in milliseconds, in this example we set the time limit to 1 minute
//		hyper_heuristic_object.setTimeLimit(60);
		hyper_heuristic_object.setTimeLimit(time);
		
		//a key step is to assign the ProblemDomain object to the HyperHeuristic object. 
		//However, this should be done after the instance has been loaded, and after the time limit has been set
		hyper_heuristic_object.loadProblemDomain(problem);

		//now that all of the parameters have been loaded, the run method can be called.
		//this method starts the timer, and then calls the solve() method of the hyper_heuristic_object.
		hyper_heuristic_object.run();

		//obtain the best solution found within the time limit
		System.out.println(hyper_heuristic_object.getBestSolutionValue());
	}
}