package irace;

import AbstractClasses.HyperHeuristic;
import AbstractClasses.ProblemDomain;
import travelingSalesmanProblem.TSP;

/**
 * --------Weiyao 0321--------
 * command-line argument: -p <problem instance id>, -t <termination time>, -i <option: intensity>, -d <option: depth of search>
 * multiple LLHs, same DoS and IoM parameters
 * correspond to test3.jar
 * ---------------------------
 * This class shows how to run a selected hyper-heuristic on a selected problem domain.
 * It shows the minimum that must be done to test a hyper heuristic on a problem domain, and it is 
 * intended to be read before the ExampleRun2 class, which provides an example of a more complex set-up
 */
public class ExampleRun {

	public static void main(String[] args) {

		// Default values
		int insid=0; double depthOfSearch=0.2, intensityOfMutation=0.2; long time=0;
		
		// Flag to track whether -p is specified
		boolean pSpecified = false, tSpecified = false; 
		

		//-------------------------------Parse command line arguments for parameters--------------------------
		// Parse command line arguments
        for (int j = 0; j < args.length; j++) {
            switch (args[j]) {
            	// instance id
                case "-p":
                	insid = Integer.parseInt(args[++j]);
                	pSpecified = true;
                    break;
                // depth of search
                case "-d":
                	depthOfSearch = Double.parseDouble(args[++j]);
                    break;
                // intensity of mutation
                case "-i":
                	intensityOfMutation = Double.parseDouble(args[++j]);
                    break;
                // termination time
                case "-t":
                	time = Long.parseLong(args[++j]);
                	tSpecified = true;
                	break;
                default:
                    System.out.println("Unknown option: " + args[j]);
                    System.exit(1);
            }
        }
        // Check if -p and -t are specified
        if (!pSpecified || !tSpecified) {
            System.out.println("Error: -p and -t are required.");
            System.exit(1);
        }
        
        //-------------------------------Execute the example HH---------------------------------

		//create a ProblemDomain object with a seed for the random number generator
		//ProblemDomain problem = new SAT(1234);
		ProblemDomain problem = new TSP(1234);

		//creates an ExampleHyperHeuristic object with a seed for the random number generator
		HyperHeuristic hyper_heuristic_object = new ExampleHyperHeuristic1_v1(5678, depthOfSearch, intensityOfMutation);

		//we must load an instance within the problem domain, in this case we choose instance 2
		problem.loadInstance(insid);
//		problem.loadInstance(0);

		//we must set the time limit for the hyper-heuristic in milliseconds, in this example we set the time limit to 1 minute
//		hyper_heuristic_object.setTimeLimit(60);
		hyper_heuristic_object.setTimeLimit(time);
		
		//a key step is to assign the ProblemDomain object to the HyperHeuristic object. 
		//However, this should be done after the instance has been loaded, and after the time limit has been set
		hyper_heuristic_object.loadProblemDomain(problem);

		//now that all of the parameters have been loaded, the run method can be called.
		//this method starts the timer, and then calls the solve() method of the hyper_heuristic_object.
		hyper_heuristic_object.run();

		//obtain the best solution found within the time limit
		System.out.println(hyper_heuristic_object.getBestSolutionValue());
	}
}