package config2params;

import AbstractClasses.HyperHeuristic;
import AbstractClasses.ProblemDomain;
import travelingSalesmanProblem.TSP;

/**
 * This class shows how to run the example hyper-heuristic with manual specified arguments.
 * When executing this class, please ensure to set the run configurations. 
 * The "-p" (instance ID) and "-t" (termination time) options are mandatory: e.g., -p 6 -t 10000
 * Full list of arguments:
 * -insseed <instance-seed>   : Seed for the instance generator (default: 1234)
 * -algseed <algorithm-seed>  : Seed for the algorithm (default: 5678)
 * -p <instance-id>           : ID of the problem instance to use
 * -t <termination-time>      : Termination time for the hyper-heuristic in milliseconds
 * -d <DOS-value>             : Depth of Search (DOS) values separated by spaces (default: 0.2)
 * -i <IOM-value>             : Intensity of Mutation (IOM) values separated by spaces (default: 0.2)
 * Example usage: 
 * -p 6 -t 10000
 * -p 6 -t 10000 -insseed 20240408 -algseed 20240409 -d 0.2 0.4 0.6 -i 0.1 0.3 0.5
 */
public class ExampleRun {

	public static void main(String[] args) {

		// Default seeds
		long insseed=1234, algseed=5678;
		// Default values for dos and iom
		double depthOfSearch=0.2, intensityOfMutation=0.2;
		
		// Flag to track whether -p is specified
		boolean pSpecified = false, tSpecified = false; 
		int insid=0; long time=0;  
		

		//-------------------------------Parse command line arguments for parameters--------------------------
		// Parse command line arguments
        for (int j = 0; j < args.length; j++) {
            switch (args[j]) {
            	// seed
	            case "-insseed":
	        		insseed = Long.parseLong(args[++j]);
	        		break;
	        	case "-algseed":
	        		algseed = Long.parseLong(args[++j]);
	        		break;
            	// instance id
                case "-p":
                	insid = Integer.parseInt(args[++j]);
                	pSpecified = true;
                    break;
                // depth of search
                case "-d":
                	depthOfSearch = Double.parseDouble(args[++j]);
                    break;
                // intensity of mutation
                case "-i":
                	intensityOfMutation = Double.parseDouble(args[++j]);
                    break;
                // termination time
                case "-t":
                	time = Long.parseLong(args[++j]);
                	tSpecified = true;
                	break;
                default:
                    System.out.println("Unknown option: " + args[j]);
                    System.exit(1);
            }
        }
        // Check if -p and -t are specified
        if (!pSpecified || !tSpecified) {
            System.out.println("Error: -p and -t are required.");
            System.exit(1);
        }
        
        //-------------------------------Execute the example HH---------------------------------

		//create a ProblemDomain object with a seed for the random number generator
		ProblemDomain problem = new TSP(insseed);

		//creates an ExampleHyperHeuristic object with a seed for the random number generator
		HyperHeuristic hyper_heuristic_object = new ExapleHH(algseed, depthOfSearch, intensityOfMutation);

		//we must load an instance within the problem domain, in this case we choose instance 2
		problem.loadInstance(insid);

		//we must set the time limit for the hyper-heuristic in milliseconds, in this example we set the time limit to 1 minute
		hyper_heuristic_object.setTimeLimit(time);
		
		//a key step is to assign the ProblemDomain object to the HyperHeuristic object. 
		//However, this should be done after the instance has been loaded, and after the time limit has been set
		hyper_heuristic_object.loadProblemDomain(problem);
		
		// Print information before running the hyper-heuristic
		printAlgorithmInfo(problem, hyper_heuristic_object, time, insid, insseed, algseed);

		//now that all of the parameters have been loaded, the run method can be called.
		//this method starts the timer, and then calls the solve() method of the hyper_heuristic_object.
		hyper_heuristic_object.run();

		//obtain the best solution found within the time limit
		System.out.println(hyper_heuristic_object.getBestSolutionValue());
	}
	
	// Print algorithm information before running
    private static void printAlgorithmInfo(ProblemDomain problem, HyperHeuristic hyperHeuristic, long time, int insid, long insseed, long algseed) {
        System.out.println("Algorithm: " + hyperHeuristic.toString());
        System.out.println("Problem instance: " + problem.getClass() + " ID: " + insid);
        System.out.println("Time limit set to: " + time / 1000 + " seconds");
        System.out.println("Instance seed: " + insseed + ". Algorithm seed: " + algseed);
        System.out.println("Search ...");
    }
}